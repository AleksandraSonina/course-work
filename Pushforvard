#include <bits/stdc++.h>
#define fi first
#define se second
using namespace std;
const int N = 2e5 + 1;

string s[3] = {"s1", "s2", "s3"}, t[3] = {"t1", "t2", "t3"};


struct vert {
    string s;
    pair<int, int> x1;
    int x, y, x_, y_;
};

vert m[72], mp[18];
vector <vector <pair<int, string> > > e1, e2;
int top = 0;

vector <vector <pair<int, string> > > build_tree1() {
    int i, j, i1, i2;
    vector <vector <pair<int, string> > > e;
    e.resize(18);
    for (i = 0; i < 18; ++i) {
        if (i < 9)
            mp[i].s = "x";
        else
            mp[i].s = "y";
        mp[i].x = (i % 9) / 3;
        mp[i].y = (i % 9) % 3;
    }
    // for each u = 0..8, u = x[u / 3][u % 3]
    // for each u = 9..17, u = y[(u - 9) / 3][(u - 9) % 3]
    // edges x[i][j]
    for (i = 0; i < 9; ++i) {
        int i1 = i / 3, j1 = i % 3;
        for (j = 0; j < 9; ++j) {
            int i2 = j / 3, j2 = j % 3;
            if (i1 == i2 && j1 != j2)
                e[i].push_back({j, s[j1] + " - " + s[j2]});
            if (i1 != i2 && j1 == j2)
                e[i].push_back({j, t[i2] + " - " + t[i1]});
        }
        for (j = 0; j < 9; ++j) {
            int m = j / 3, n = j % 3;
            if (m != j1 && n != i1)
            for (int m1 = 0; m1 < 3; ++m1)
            for (int n1 = 0; n1 < 3; ++n1)
            if (m1 != i1 && m1 != n && n1 != j1 && n1 != m) {
                e[i].push_back({j + 9, t[m1] + " - " + s[n1]});
                e[j + 9].push_back({i, t[m1] + " - " + s[n1]});
            }
        }
    }
    //edges y[i][j]
    for (i = 0; i < 9; ++i) {
        int i1 = i / 3, j1 = i % 3;
        for (j = 0; j < 9; ++j) {
            int i2 = j / 3, j2 = j % 3;
            if (i1 == i2 && j1 != j2)
                e[i + 9].push_back({j + 9, t[j1] + " - " + t[j2]});
            if (i1 != i2 && j1 == j2)
                e[i + 9].push_back({j + 9, s[i2] + " - " + s[i1]});
        }
    }
    return e;
}

int kek(int a, int b) {
    for (int i = 0; i < 3; ++i)
    if (i != a && i != b)
        return i;
}

vector <vector <pair<int, string> > > build_tree2() {
    vector <vector <pair<int, string> > > e;
    e.resize(72);
    top = -1;
    for (int i = 0; i < 3; ++i)
    for (int j = 0; j < 3; ++j)
    for (int k = 0; k < 3; ++k)
    for (int l = 0; l < 3; ++l)
    if (i != j && k != l) {
        ++top;
        m[top].s = "x";
        m[top].x1 = {i, l};
        m[top].x = i;
        m[top].y = j;
        m[top].x_ = k;
        m[top].y_ = l;
        ++top;
        m[top].s = "y";
        m[top].x1 = {k, j};
        m[top].x = i;
        m[top].y = j;
        m[top].x_ = k;
        m[top].y_ = l;
    }
    int jp = 0;
    for (int u = 0; u < 72; ++u)
    for (int p = 0; p < 72; ++p)
    if (u != p) {
        if (m[u].x == m[p].x && m[u].x_ == m[p].x_ && m[u].y == m[p].y && m[u].y_ == m[p].y_)
            e[u].push_back({p, s[kek(m[u].x_, m[p].y_)] + " - " + t[kek(m[u].x, m[u].y)]});
        if (m[u].s == m[p].s) {
            if (m[u].x != m[p].x && m[u].y == m[p].y && m[u].x_ == m[p].x_ && m[u].y_ == m[p].y_)
                e[u].push_back({p, t[m[p].x] + " - " + t[m[u].x]});
            if (m[u].x == m[p].x && m[u].y != m[p].y && m[u].x_ == m[p].x_ && m[u].y_ == m[p].y_)
                e[u].push_back({p, t[m[p].y] + " - " + t[m[u].y]});
            if (m[u].x == m[p].x && m[u].y == m[p].y && m[u].x_ != m[p].x_ && m[u].y_ == m[p].y_)
                e[u].push_back({p, s[m[p].x_] + " - " + s[m[u].x_]});
            if (m[u].x == m[p].x && m[u].y == m[p].y && m[u].x_ == m[p].x_ && m[u].y_ != m[p].y_)
                e[u].push_back({p, s[m[p].y_] + " - " + s[m[u].y_]});
        }
        if (m[u].s == m[p].s && m[u].x == m[p].y && m[u].x_ == m[p].x_ && m[u].y == m[p].x && m[u].y_ == m[p].y_)
            e[u].push_back({p, t[m[u].x] + " - " + t[m[u].y]});
        if (m[u].s == m[p].s && m[u].x == m[p].x && m[u].x_ == m[p].y_ && m[u].y == m[p].y && m[u].y_ == m[p].x_)
            e[u].push_back({p, s[m[u].x_] + " - " + s[m[u].y_]});
    }
    return e;
}


void writef(string s, int a, int b) {
    map <string, int> h;
    --a;
    --b;
    int u = 0;
    for (u = 0; u < 18; ++u)
    if (mp[u].s == s && mp[u].x == a && mp[u].y == b)
        break;
    int cnt = 0;
    for (int i = 0; i < 72; ++i)
    if (m[i].s == mp[u].s && m[i].x1.first == mp[u].x && m[i].x1.second == mp[u].y) {
        ++cnt;
        if (cnt > 1)
            cout << "+ ";
        cout << "b(" + m[i].s << (char) (m[i].x1.first + '1') << (char) (m[i].x1.second + '1') << ", x" << (char) (m[i].x + '1') << ", y" << (char) (m[i].y + '1') << ", x'" << (char) (m[i].x_ + '1') << ", y'" << (char) (m[i].y_ + '1') << ") * ";
        for (int j = 0; j < e2[i].size(); ++j)
            --h[e2[i][j].second];
        for (int j = 0; j < e1[u].size(); ++j) {
            ++h[e1[u][j].second];
        }
        for (map <string, int> :: iterator it = h.begin(); it != h.end(); ++it)
        for (int j = 0; j < (*it).second; ++j)
            cout << "(" + (*it).first + ")";
        cout << "/ (";
        for (map <string, int> :: iterator it = h.begin(); it != h.end(); ++it)
        for (int j = 0; j < -((*it).second); ++j)
            cout << "(" + (*it).first + ")";
        cout << ")" << endl;
        h.clear();
    }
}

string f(char a) {
    string s;
    s += a;
    return s;
}

void invs(vector <vector <pair<int, string> > > &e) {
    for (int i = 0; i < e.size(); ++i)
    for (int j = 0; j < e[i].size(); ++j)
    if (f(e[i][j].second[0]) + f(e[i][j].second[1]) > f(e[i][j].second[5]) + f(e[i][j].second[6])) {
        swap(e[i][j].second[0], e[i][j].second[5]);
        swap(e[i][j].second[1], e[i][j].second[6]);
    }
}

int main() {
    int i, j, k, n;
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    e1 = build_tree1(), e2 = build_tree2();
    invs(e1);
    invs(e2);
    writef("y", 3, 2);
}
